/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IAuctionHouse {
  export type AuctionStruct = {
    isActive: boolean;
    tokenId: BigNumberish;
    tokenContract: string;
    approved: boolean;
    amount: BigNumberish;
    duration: BigNumberish;
    firstBidTime: BigNumberish;
    reservePrice: BigNumberish;
    curatorFeePercentage: BigNumberish;
    tokenOwner: string;
    bidder: string;
    curator: string;
    auctionCurrency: string;
    timeBuffer: BigNumberish;
    minBidIncrementPercentage: BigNumberish;
  };

  export type AuctionStructOutput = [
    boolean,
    BigNumber,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    number
  ] & {
    isActive: boolean;
    tokenId: BigNumber;
    tokenContract: string;
    approved: boolean;
    amount: BigNumber;
    duration: BigNumber;
    firstBidTime: BigNumber;
    reservePrice: BigNumber;
    curatorFeePercentage: number;
    tokenOwner: string;
    bidder: string;
    curator: string;
    auctionCurrency: string;
    timeBuffer: BigNumber;
    minBidIncrementPercentage: number;
  };
}

export declare namespace LibPart {
  export type PartStruct = { account: string; value: BigNumberish };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export interface AuctionHouseInterface extends utils.Interface {
  functions: {
    "cancelAuction(address,uint256)": FunctionFragment;
    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)": FunctionFragment;
    "createBid(address,uint256,uint256)": FunctionFragment;
    "endAuction(address,uint256)": FunctionFragment;
    "getAuction(address,uint256)": FunctionFragment;
    "getMeemContractAddress()": FunctionFragment;
    "getRoyalties(address,uint256)": FunctionFragment;
    "setAuctionApproval(address,uint256,bool)": FunctionFragment;
    "setAuctionReservePrice(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelAuction"
      | "createAuction"
      | "createBid"
      | "endAuction"
      | "getAuction"
      | "getMeemContractAddress"
      | "getRoyalties"
      | "setAuctionApproval"
      | "setAuctionReservePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionApproval",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionReservePrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMeemContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionReservePrice",
    data: BytesLike
  ): Result;

  events: {
    "AuctionApprovalUpdated(address,uint256,bool)": EventFragment;
    "AuctionBid(address,uint256,address,uint256,bool,bool)": EventFragment;
    "AuctionCanceled(address,uint256,address)": EventFragment;
    "AuctionCreated(address,uint256,uint256,uint256,address,address,uint8,address)": EventFragment;
    "AuctionDurationExtended(address,uint256,uint256)": EventFragment;
    "AuctionEnded(address,uint256,address,address,uint256,address)": EventFragment;
    "AuctionReservePriceUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
}

export interface AuctionApprovalUpdatedEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  approved: boolean;
}
export type AuctionApprovalUpdatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  AuctionApprovalUpdatedEventObject
>;

export type AuctionApprovalUpdatedEventFilter =
  TypedEventFilter<AuctionApprovalUpdatedEvent>;

export interface AuctionBidEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  sender: string;
  value: BigNumber;
  firstBid: boolean;
  extended: boolean;
}
export type AuctionBidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, boolean, boolean],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionCanceledEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  tokenOwner: string;
}
export type AuctionCanceledEvent = TypedEvent<
  [string, BigNumber, string],
  AuctionCanceledEventObject
>;

export type AuctionCanceledEventFilter = TypedEventFilter<AuctionCanceledEvent>;

export interface AuctionCreatedEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  duration: BigNumber;
  reservePrice: BigNumber;
  tokenOwner: string;
  curator: string;
  curatorFeePercentage: number;
  auctionCurrency: string;
}
export type AuctionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string, number, string],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionDurationExtendedEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  duration: BigNumber;
}
export type AuctionDurationExtendedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AuctionDurationExtendedEventObject
>;

export type AuctionDurationExtendedEventFilter =
  TypedEventFilter<AuctionDurationExtendedEvent>;

export interface AuctionEndedEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  tokenOwner: string;
  winner: string;
  amount: BigNumber;
  auctionCurrency: string;
}
export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface AuctionReservePriceUpdatedEventObject {
  tokenContract: string;
  tokenId: BigNumber;
  reservePrice: BigNumber;
}
export type AuctionReservePriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AuctionReservePriceUpdatedEventObject
>;

export type AuctionReservePriceUpdatedEventFilter =
  TypedEventFilter<AuctionReservePriceUpdatedEvent>;

export interface AuctionHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IAuctionHouse.AuctionStructOutput]>;

    getMeemContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPart.PartStructOutput[]]>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentage: BigNumberish,
    auctionCurrency: string,
    timeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBid(
    tokenContract: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IAuctionHouse.AuctionStructOutput>;

  getMeemContractAddress(overrides?: CallOverrides): Promise<string>;

  getRoyalties(
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPart.PartStructOutput[]>;

  setAuctionApproval(
    tokenContract: string,
    tokenId: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionReservePrice(
    tokenContract: string,
    tokenId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IAuctionHouse.AuctionStructOutput>;

    getMeemContractAddress(overrides?: CallOverrides): Promise<string>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPart.PartStructOutput[]>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionApprovalUpdated(address,uint256,bool)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      approved?: null
    ): AuctionApprovalUpdatedEventFilter;
    AuctionApprovalUpdated(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      approved?: null
    ): AuctionApprovalUpdatedEventFilter;

    "AuctionBid(address,uint256,address,uint256,bool,bool)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      sender?: null,
      value?: null,
      firstBid?: null,
      extended?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      sender?: null,
      value?: null,
      firstBid?: null,
      extended?: null
    ): AuctionBidEventFilter;

    "AuctionCanceled(address,uint256,address)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      tokenOwner?: null
    ): AuctionCanceledEventFilter;
    AuctionCanceled(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      tokenOwner?: null
    ): AuctionCanceledEventFilter;

    "AuctionCreated(address,uint256,uint256,uint256,address,address,uint8,address)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      duration?: null,
      reservePrice?: null,
      tokenOwner?: null,
      curator?: null,
      curatorFeePercentage?: null,
      auctionCurrency?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      duration?: null,
      reservePrice?: null,
      tokenOwner?: null,
      curator?: null,
      curatorFeePercentage?: null,
      auctionCurrency?: null
    ): AuctionCreatedEventFilter;

    "AuctionDurationExtended(address,uint256,uint256)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      duration?: null
    ): AuctionDurationExtendedEventFilter;
    AuctionDurationExtended(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      duration?: null
    ): AuctionDurationExtendedEventFilter;

    "AuctionEnded(address,uint256,address,address,uint256,address)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      tokenOwner?: null,
      winner?: null,
      amount?: null,
      auctionCurrency?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      tokenOwner?: null,
      winner?: null,
      amount?: null,
      auctionCurrency?: null
    ): AuctionEndedEventFilter;

    "AuctionReservePriceUpdated(address,uint256,uint256)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;
    AuctionReservePriceUpdated(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;
  };

  estimateGas: {
    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
