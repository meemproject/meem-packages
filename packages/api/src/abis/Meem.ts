/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MeemPermissionStruct = {
  permission: BigNumberish;
  addresses: string[];
  numTokens: BigNumberish;
  lockedBy: string;
  costWei: BigNumberish;
};

export type MeemPermissionStructOutput = [
  number,
  string[],
  BigNumber,
  string,
  BigNumber
] & {
  permission: number;
  addresses: string[];
  numTokens: BigNumber;
  lockedBy: string;
  costWei: BigNumber;
};

export type SplitStruct = {
  toAddress: string;
  amount: BigNumberish;
  lockedBy: string;
};

export type SplitStructOutput = [string, BigNumber, string] & {
  toAddress: string;
  amount: BigNumber;
  lockedBy: string;
};

export type MeemPropertiesStruct = {
  totalRemixes: BigNumberish;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumberish;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStruct[];
  remixPermissions: MeemPermissionStruct[];
  readPermissions: MeemPermissionStruct[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
  totalCopies: BigNumberish;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumberish;
  copiesPerWalletLockedBy: string;
};

export type MeemPropertiesStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  string,
  string,
  string,
  SplitStructOutput[],
  string,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  totalRemixes: BigNumber;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumber;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStructOutput[];
  remixPermissions: MeemPermissionStructOutput[];
  readPermissions: MeemPermissionStructOutput[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
  totalCopies: BigNumber;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumber;
  copiesPerWalletLockedBy: string;
};

export type MeemMintParametersStruct = {
  to: string;
  tokenURI: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  meemType: BigNumberish;
  data: string;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemMintParametersStructOutput = [
  string,
  string,
  number,
  string,
  BigNumber,
  number,
  string,
  boolean,
  string,
  number,
  string[]
] & {
  to: string;
  tokenURI: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  meemType: number;
  data: string;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type MeemStruct = {
  owner: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  rootChain: BigNumberish;
  root: string;
  rootTokenId: BigNumberish;
  generation: BigNumberish;
  properties: MeemPropertiesStruct;
  childProperties: MeemPropertiesStruct;
  mintedAt: BigNumberish;
  data: string;
  uriLockedBy: string;
  meemType: BigNumberish;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemStructOutput = [
  string,
  number,
  string,
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  BigNumber,
  string,
  string,
  number,
  string,
  number,
  string[]
] & {
  owner: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  rootChain: number;
  root: string;
  rootTokenId: BigNumber;
  generation: BigNumber;
  properties: MeemPropertiesStructOutput;
  childProperties: MeemPropertiesStructOutput;
  mintedAt: BigNumber;
  data: string;
  uriLockedBy: string;
  meemType: number;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type WrappedItemStruct = {
  chain: BigNumberish;
  contractAddress: string;
  tokenId: BigNumberish;
};

export type WrappedItemStructOutput = [number, string, BigNumber] & {
  chain: number;
  contractAddress: string;
  tokenId: BigNumber;
};

export type ReactionStruct = { reaction: string; count: BigNumberish };

export type ReactionStructOutput = [string, BigNumber] & {
  reaction: string;
  count: BigNumber;
};

export declare namespace LibPart {
  export type PartStruct = { account: string; value: BigNumberish };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export declare namespace IDiamondCuttable {
  export type FacetCutStruct = {
    target: string;
    action: BigNumberish;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = { target: string; selectors: BytesLike[] };

  export type FacetStructOutput = [string, string[]] & {
    target: string;
    selectors: string[];
  };
}

export interface MeemInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "addressClippings(address)": FunctionFragment;
    "clip(uint256)": FunctionFragment;
    "clippings(uint256)": FunctionFragment;
    "hasAddressClipped(uint256,address)": FunctionFragment;
    "numClippings(uint256)": FunctionFragment;
    "unClip(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerTokens(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "setChildDepth(int256)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setMeemIDAddress(address)": FunctionFragment;
    "setNonOwnerSplitAllocationAmount(uint256)": FunctionFragment;
    "setTokenCounter(uint256)": FunctionFragment;
    "setTokenRoot(uint256,uint8,address,uint256)": FunctionFragment;
    "mint((address,string,uint8,address,uint256,uint8,string,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address))": FunctionFragment;
    "mintAndCopy((address,string,uint8,address,uint256,uint8,string,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),address)": FunctionFragment;
    "mintAndRemix((address,string,uint8,address,uint256,uint8,string,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),(address,string,uint8,address,uint256,uint8,string,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address))": FunctionFragment;
    "addPermission(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "lockCopiesPerWallet(uint256,uint8)": FunctionFragment;
    "lockPermissions(uint256,uint8,uint8)": FunctionFragment;
    "lockRemixesPerWallet(uint256,uint8)": FunctionFragment;
    "lockTotalCopies(uint256,uint8)": FunctionFragment;
    "lockTotalRemixes(uint256,uint8)": FunctionFragment;
    "lockUri(uint256)": FunctionFragment;
    "removePermissionAt(uint256,uint8,uint8,uint256)": FunctionFragment;
    "setCopiesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setData(uint256,string)": FunctionFragment;
    "setPermissions(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256)[])": FunctionFragment;
    "setRemixesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setTokenUri(uint256,string)": FunctionFragment;
    "setTotalCopies(uint256,uint8,int256)": FunctionFragment;
    "setTotalRemixes(uint256,uint8,int256)": FunctionFragment;
    "setURISource(uint256,uint8)": FunctionFragment;
    "updatePermissionAt(uint256,uint8,uint8,uint256,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "childDepth()": FunctionFragment;
    "copiesOf(uint256)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "isNFTWrapped(uint8,address,uint256)": FunctionFragment;
    "numCopiesOf(uint256)": FunctionFragment;
    "numRemixesOf(uint256)": FunctionFragment;
    "ownedCopiesOf(uint256,address)": FunctionFragment;
    "ownedRemixesOf(uint256,address)": FunctionFragment;
    "remixesOf(uint256)": FunctionFragment;
    "tokenIdOfOwnerIndex(address,uint256)": FunctionFragment;
    "tokenIdsOfOwner(address)": FunctionFragment;
    "wrappedTokens((uint8,address,uint256)[])": FunctionFragment;
    "addSplit(uint256,uint8,(address,uint256,address))": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "lockSplits(uint256,uint8)": FunctionFragment;
    "nonOwnerSplitAllocationAmount()": FunctionFragment;
    "removeSplitAt(uint256,uint8,uint256)": FunctionFragment;
    "setSplits(uint256,uint8,(address,uint256,address)[])": FunctionFragment;
    "updateSplitAt(uint256,uint8,uint256,(address,uint256,address))": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addReaction(uint256,string)": FunctionFragment;
    "getReactedAt(uint256,address,string)": FunctionFragment;
    "getReactions(uint256)": FunctionFragment;
    "removeReaction(uint256,string)": FunctionFragment;
    "setReactionTypes(uint256,string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "MINTER_ROLE"
      | "grantRole"
      | "hasRole"
      | "revokeRole"
      | "addressClippings"
      | "clip"
      | "clippings"
      | "hasAddressClipped"
      | "numClippings"
      | "unClip"
      | "approve"
      | "balanceOf"
      | "baseTokenURI"
      | "burn"
      | "contractAddress"
      | "contractURI"
      | "getApproved"
      | "isApprovedForAll"
      | "name"
      | "onERC721Received"
      | "ownerOf"
      | "ownerTokens"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "setChildDepth"
      | "setContractURI"
      | "setMeemIDAddress"
      | "setNonOwnerSplitAllocationAmount"
      | "setTokenCounter"
      | "setTokenRoot"
      | "mint"
      | "mintAndCopy"
      | "mintAndRemix"
      | "addPermission"
      | "lockCopiesPerWallet"
      | "lockPermissions"
      | "lockRemixesPerWallet"
      | "lockTotalCopies"
      | "lockTotalRemixes"
      | "lockUri"
      | "removePermissionAt"
      | "setCopiesPerWallet"
      | "setData"
      | "setPermissions"
      | "setRemixesPerWallet"
      | "setTokenUri"
      | "setTotalCopies"
      | "setTotalRemixes"
      | "setURISource"
      | "updatePermissionAt"
      | "childDepth"
      | "copiesOf"
      | "getMeem"
      | "isNFTWrapped"
      | "numCopiesOf"
      | "numRemixesOf"
      | "ownedCopiesOf"
      | "ownedRemixesOf"
      | "remixesOf"
      | "tokenIdOfOwnerIndex"
      | "tokenIdsOfOwner"
      | "wrappedTokens"
      | "addSplit"
      | "getRaribleV2Royalties"
      | "lockSplits"
      | "nonOwnerSplitAllocationAmount"
      | "removeSplitAt"
      | "setSplits"
      | "updateSplitAt"
      | "acceptOwnership"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getFallbackAddress"
      | "nomineeOwner"
      | "owner"
      | "setFallbackAddress"
      | "supportsInterface"
      | "transferOwnership"
      | "addReaction"
      | "getReactedAt"
      | "getReactions"
      | "removeReaction"
      | "setReactionTypes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressClippings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "clip", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "clippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAddressClipped",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numClippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unClip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMeemIDAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoot",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndCopy",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndRemix",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCopiesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRemixesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalCopies",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalRemixes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCopiesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemixesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalCopies",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalRemixes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setURISource",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      MeemPermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "childDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "copiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNFTWrapped",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numCopiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numRemixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedCopiesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedRemixesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdOfOwnerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [WrappedItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplit",
    values: [BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSplits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonOwnerSplitAllocationAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [BigNumberish, BigNumberish, SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCuttable.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactedAt",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReactionTypes",
    values: [BigNumberish, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clippings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAddressClipped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unClip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMeemIDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndRemix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setURISource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childDepth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copiesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remixesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdOfOwnerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReactionTypes",
    data: BytesLike
  ): Result;

  events: {
    "TokenClipped(uint256,address)": EventFragment;
    "TokenUnClipped(uint256,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "PropertiesSet(uint256,uint8,tuple)": EventFragment;
    "CopiesPerWalletLocked(uint256,uint8,address)": EventFragment;
    "CopiesPerWalletSet(uint256,uint8,int256)": EventFragment;
    "DataSet(uint256,string)": EventFragment;
    "PermissionsSet(uint256,uint8,uint8,tuple[])": EventFragment;
    "RemixesPerWalletLocked(uint256,uint8,address)": EventFragment;
    "RemixesPerWalletSet(uint256,uint8,int256)": EventFragment;
    "TotalCopiesLocked(uint256,uint8,address)": EventFragment;
    "TotalCopiesSet(uint256,uint8,int256)": EventFragment;
    "TotalRemixesLocked(uint256,uint8,address)": EventFragment;
    "TotalRemixesSet(uint256,uint8,int256)": EventFragment;
    "URILockedBySet(uint256,address)": EventFragment;
    "URISet(uint256,string)": EventFragment;
    "URISourceSet(uint256,uint8)": EventFragment;
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
    "SplitsSet(uint256,uint8,tuple[])": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenReactionAdded(uint256,address,string,uint256)": EventFragment;
    "TokenReactionRemoved(uint256,address,string,uint256)": EventFragment;
    "TokenReactionTypesSet(uint256,string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenClipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnClipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CopiesPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CopiesPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemixesPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemixesPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalCopiesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalCopiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalRemixesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalRemixesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URILockedBySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URISourceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SplitsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReactionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReactionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReactionTypesSet"): EventFragment;
}

export interface TokenClippedEventObject {
  tokenId: BigNumber;
  addy: string;
}
export type TokenClippedEvent = TypedEvent<
  [BigNumber, string],
  TokenClippedEventObject
>;

export type TokenClippedEventFilter = TypedEventFilter<TokenClippedEvent>;

export interface TokenUnClippedEventObject {
  tokenId: BigNumber;
  addy: string;
}
export type TokenUnClippedEvent = TypedEvent<
  [BigNumber, string],
  TokenUnClippedEventObject
>;

export type TokenUnClippedEventFilter = TypedEventFilter<TokenUnClippedEvent>;

export interface ApprovalEventObject {
  owner: string;
  operator: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PropertiesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  props: MeemPropertiesStructOutput;
}
export type PropertiesSetEvent = TypedEvent<
  [BigNumber, number, MeemPropertiesStructOutput],
  PropertiesSetEventObject
>;

export type PropertiesSetEventFilter = TypedEventFilter<PropertiesSetEvent>;

export interface CopiesPerWalletLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type CopiesPerWalletLockedEvent = TypedEvent<
  [BigNumber, number, string],
  CopiesPerWalletLockedEventObject
>;

export type CopiesPerWalletLockedEventFilter =
  TypedEventFilter<CopiesPerWalletLockedEvent>;

export interface CopiesPerWalletSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalCopies: BigNumber;
}
export type CopiesPerWalletSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  CopiesPerWalletSetEventObject
>;

export type CopiesPerWalletSetEventFilter =
  TypedEventFilter<CopiesPerWalletSetEvent>;

export interface DataSetEventObject {
  tokenId: BigNumber;
  data: string;
}
export type DataSetEvent = TypedEvent<[BigNumber, string], DataSetEventObject>;

export type DataSetEventFilter = TypedEventFilter<DataSetEvent>;

export interface PermissionsSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  permissionType: number;
  permission: MeemPermissionStructOutput[];
}
export type PermissionsSetEvent = TypedEvent<
  [BigNumber, number, number, MeemPermissionStructOutput[]],
  PermissionsSetEventObject
>;

export type PermissionsSetEventFilter = TypedEventFilter<PermissionsSetEvent>;

export interface RemixesPerWalletLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type RemixesPerWalletLockedEvent = TypedEvent<
  [BigNumber, number, string],
  RemixesPerWalletLockedEventObject
>;

export type RemixesPerWalletLockedEventFilter =
  TypedEventFilter<RemixesPerWalletLockedEvent>;

export interface RemixesPerWalletSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalRemixes: BigNumber;
}
export type RemixesPerWalletSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  RemixesPerWalletSetEventObject
>;

export type RemixesPerWalletSetEventFilter =
  TypedEventFilter<RemixesPerWalletSetEvent>;

export interface TotalCopiesLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type TotalCopiesLockedEvent = TypedEvent<
  [BigNumber, number, string],
  TotalCopiesLockedEventObject
>;

export type TotalCopiesLockedEventFilter =
  TypedEventFilter<TotalCopiesLockedEvent>;

export interface TotalCopiesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalCopies: BigNumber;
}
export type TotalCopiesSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  TotalCopiesSetEventObject
>;

export type TotalCopiesSetEventFilter = TypedEventFilter<TotalCopiesSetEvent>;

export interface TotalRemixesLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type TotalRemixesLockedEvent = TypedEvent<
  [BigNumber, number, string],
  TotalRemixesLockedEventObject
>;

export type TotalRemixesLockedEventFilter =
  TypedEventFilter<TotalRemixesLockedEvent>;

export interface TotalRemixesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalRemixes: BigNumber;
}
export type TotalRemixesSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  TotalRemixesSetEventObject
>;

export type TotalRemixesSetEventFilter = TypedEventFilter<TotalRemixesSetEvent>;

export interface URILockedBySetEventObject {
  tokenId: BigNumber;
  lockedBy: string;
}
export type URILockedBySetEvent = TypedEvent<
  [BigNumber, string],
  URILockedBySetEventObject
>;

export type URILockedBySetEventFilter = TypedEventFilter<URILockedBySetEvent>;

export interface URISetEventObject {
  tokenId: BigNumber;
  uri: string;
}
export type URISetEvent = TypedEvent<[BigNumber, string], URISetEventObject>;

export type URISetEventFilter = TypedEventFilter<URISetEvent>;

export interface URISourceSetEventObject {
  tokenId: BigNumber;
  uriSource: number;
}
export type URISourceSetEvent = TypedEvent<
  [BigNumber, number],
  URISourceSetEventObject
>;

export type URISourceSetEventFilter = TypedEventFilter<URISourceSetEvent>;

export interface RoyaltiesSetEventObject {
  tokenId: BigNumber;
  royalties: LibPart.PartStructOutput[];
}
export type RoyaltiesSetEvent = TypedEvent<
  [BigNumber, LibPart.PartStructOutput[]],
  RoyaltiesSetEventObject
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export interface SplitsSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  splits: SplitStructOutput[];
}
export type SplitsSetEvent = TypedEvent<
  [BigNumber, number, SplitStructOutput[]],
  SplitsSetEventObject
>;

export type SplitsSetEventFilter = TypedEventFilter<SplitsSetEvent>;

export interface DiamondCutEventObject {
  facetCuts: IDiamondCuttable.FacetCutStructOutput[];
  target: string;
  data: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCuttable.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenReactionAddedEventObject {
  tokenId: BigNumber;
  addy: string;
  reaction: string;
  newTotalReactions: BigNumber;
}
export type TokenReactionAddedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TokenReactionAddedEventObject
>;

export type TokenReactionAddedEventFilter =
  TypedEventFilter<TokenReactionAddedEvent>;

export interface TokenReactionRemovedEventObject {
  tokenId: BigNumber;
  addy: string;
  reaction: string;
  newTotalReactions: BigNumber;
}
export type TokenReactionRemovedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TokenReactionRemovedEventObject
>;

export type TokenReactionRemovedEventFilter =
  TypedEventFilter<TokenReactionRemovedEvent>;

export interface TokenReactionTypesSetEventObject {
  tokenId: BigNumber;
  reactionTypes: string[];
}
export type TokenReactionTypesSetEvent = TypedEvent<
  [BigNumber, string[]],
  TokenReactionTypesSetEventObject
>;

export type TokenReactionTypesSetEventFilter =
  TypedEventFilter<TokenReactionTypesSetEvent>;

export interface Meem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemStructOutput]>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPart.PartStructOutput[]]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        diamondFacets: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ReactionStructOutput[]]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressClippings(
    addy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  clip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasAddressClipped(
    tokenId: BigNumberish,
    addy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numClippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unClip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildDepth(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMeemIDAddress(
    meemID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonOwnerSplitAllocationAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCounter(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoot(
    tokenId: BigNumberish,
    rootChain: BigNumberish,
    root: string,
    rootTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndCopy(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    toCopyAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndRemix(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    remixParams: MeemMintParametersStruct,
    remixProperties: MeemPropertiesStruct,
    remixChildProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPermission(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockUri(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setData(
    tokenId: BigNumberish,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenUri(
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURISource(
    tokenId: BigNumberish,
    uriSource: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childDepth(overrides?: CallOverrides): Promise<BigNumber>;

  copiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemStructOutput>;

  isNFTWrapped(
    chain: BigNumberish,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numCopiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numRemixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownedCopiesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ownedRemixesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  remixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenIdOfOwnerIndex(
    _owner: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdsOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  wrappedTokens(
    items: WrappedItemStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addSplit(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPart.PartStructOutput[]>;

  lockSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonOwnerSplitAllocationAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: IDiamondCuttable.FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReactedAt(
    tokenId: BigNumberish,
    addy: string,
    reaction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReactions(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ReactionStructOutput[]>;

  removeReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReactionTypes(
    tokenId: BigNumberish,
    reactionTypes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    clip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMeemIDAddress(meemID: string, overrides?: CallOverrides): Promise<void>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockUri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemStructOutput>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPart.PartStructOutput[]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ReactionStructOutput[]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenClipped(uint256,address)"(
      tokenId?: null,
      addy?: null
    ): TokenClippedEventFilter;
    TokenClipped(tokenId?: null, addy?: null): TokenClippedEventFilter;

    "TokenUnClipped(uint256,address)"(
      tokenId?: null,
      addy?: null
    ): TokenUnClippedEventFilter;
    TokenUnClipped(tokenId?: null, addy?: null): TokenUnClippedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "PropertiesSet(uint256,uint8,tuple)"(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): PropertiesSetEventFilter;
    PropertiesSet(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): PropertiesSetEventFilter;

    "CopiesPerWalletLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): CopiesPerWalletLockedEventFilter;
    CopiesPerWalletLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): CopiesPerWalletLockedEventFilter;

    "CopiesPerWalletSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): CopiesPerWalletSetEventFilter;
    CopiesPerWalletSet(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): CopiesPerWalletSetEventFilter;

    "DataSet(uint256,string)"(tokenId?: null, data?: null): DataSetEventFilter;
    DataSet(tokenId?: null, data?: null): DataSetEventFilter;

    "PermissionsSet(uint256,uint8,uint8,tuple[])"(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): PermissionsSetEventFilter;
    PermissionsSet(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): PermissionsSetEventFilter;

    "RemixesPerWalletLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): RemixesPerWalletLockedEventFilter;
    RemixesPerWalletLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): RemixesPerWalletLockedEventFilter;

    "RemixesPerWalletSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): RemixesPerWalletSetEventFilter;
    RemixesPerWalletSet(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): RemixesPerWalletSetEventFilter;

    "TotalCopiesLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): TotalCopiesLockedEventFilter;
    TotalCopiesLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): TotalCopiesLockedEventFilter;

    "TotalCopiesSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): TotalCopiesSetEventFilter;
    TotalCopiesSet(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): TotalCopiesSetEventFilter;

    "TotalRemixesLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): TotalRemixesLockedEventFilter;
    TotalRemixesLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): TotalRemixesLockedEventFilter;

    "TotalRemixesSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): TotalRemixesSetEventFilter;
    TotalRemixesSet(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): TotalRemixesSetEventFilter;

    "URILockedBySet(uint256,address)"(
      tokenId?: null,
      lockedBy?: null
    ): URILockedBySetEventFilter;
    URILockedBySet(tokenId?: null, lockedBy?: null): URILockedBySetEventFilter;

    "URISet(uint256,string)"(tokenId?: null, uri?: null): URISetEventFilter;
    URISet(tokenId?: null, uri?: null): URISetEventFilter;

    "URISourceSet(uint256,uint8)"(
      tokenId?: null,
      uriSource?: null
    ): URISourceSetEventFilter;
    URISourceSet(tokenId?: null, uriSource?: null): URISourceSetEventFilter;

    "RoyaltiesSet(uint256,tuple[])"(
      tokenId?: null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(tokenId?: null, royalties?: null): RoyaltiesSetEventFilter;

    "SplitsSet(uint256,uint8,tuple[])"(
      tokenId?: null,
      propertyType?: null,
      splits?: null
    ): SplitsSetEventFilter;
    SplitsSet(
      tokenId?: null,
      propertyType?: null,
      splits?: null
    ): SplitsSetEventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenReactionAdded(uint256,address,string,uint256)"(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): TokenReactionAddedEventFilter;
    TokenReactionAdded(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): TokenReactionAddedEventFilter;

    "TokenReactionRemoved(uint256,address,string,uint256)"(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): TokenReactionRemovedEventFilter;
    TokenReactionRemoved(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): TokenReactionRemovedEventFilter;

    "TokenReactionTypesSet(uint256,string[])"(
      tokenId?: null,
      reactionTypes?: null
    ): TokenReactionTypesSetEventFilter;
    TokenReactionTypesSet(
      tokenId?: null,
      reactionTypes?: null
    ): TokenReactionTypesSetEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMeemIDAddress(
      meemID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
