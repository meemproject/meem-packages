/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MeemPermissionStruct = {
  permission: BigNumberish;
  addresses: string[];
  numTokens: BigNumberish;
  lockedBy: string;
  costWei: BigNumberish;
};

export type MeemPermissionStructOutput = [
  number,
  string[],
  BigNumber,
  string,
  BigNumber
] & {
  permission: number;
  addresses: string[];
  numTokens: BigNumber;
  lockedBy: string;
  costWei: BigNumber;
};

export type SplitStruct = {
  toAddress: string;
  amount: BigNumberish;
  lockedBy: string;
};

export type SplitStructOutput = [string, BigNumber, string] & {
  toAddress: string;
  amount: BigNumber;
  lockedBy: string;
};

export type BasePropertiesStruct = {
  totalOriginalsSupply: BigNumberish;
  totalOriginalsSupplyLockedBy: string;
  mintPermissions: MeemPermissionStruct[];
  mintPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
  originalsPerWallet: BigNumberish;
  originalsPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumberish;
  mintEndTimestamp: BigNumberish;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumberish;
  transferLockupUntilLockedBy: string;
};

export type BasePropertiesStructOutput = [
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  string,
  SplitStructOutput[],
  string,
  BigNumber,
  string,
  boolean,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  totalOriginalsSupply: BigNumber;
  totalOriginalsSupplyLockedBy: string;
  mintPermissions: MeemPermissionStructOutput[];
  mintPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
  originalsPerWallet: BigNumber;
  originalsPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumber;
  transferLockupUntilLockedBy: string;
};

export type MeemPropertiesStruct = {
  totalRemixes: BigNumberish;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumberish;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStruct[];
  remixPermissions: MeemPermissionStruct[];
  readPermissions: MeemPermissionStruct[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStruct[];
  splitsLockedBy: string;
  totalCopies: BigNumberish;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumberish;
  copiesPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumberish;
  mintEndTimestamp: BigNumberish;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumberish;
  transferLockupUntilLockedBy: string;
};

export type MeemPropertiesStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  MeemPermissionStructOutput[],
  string,
  string,
  string,
  SplitStructOutput[],
  string,
  BigNumber,
  string,
  BigNumber,
  string,
  boolean,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  totalRemixes: BigNumber;
  totalRemixesLockedBy: string;
  remixesPerWallet: BigNumber;
  remixesPerWalletLockedBy: string;
  copyPermissions: MeemPermissionStructOutput[];
  remixPermissions: MeemPermissionStructOutput[];
  readPermissions: MeemPermissionStructOutput[];
  copyPermissionsLockedBy: string;
  remixPermissionsLockedBy: string;
  readPermissionsLockedBy: string;
  splits: SplitStructOutput[];
  splitsLockedBy: string;
  totalCopies: BigNumber;
  totalCopiesLockedBy: string;
  copiesPerWallet: BigNumber;
  copiesPerWalletLockedBy: string;
  isTransferrable: boolean;
  isTransferrableLockedBy: string;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
  mintDatesLockedBy: string;
  transferLockupUntil: BigNumber;
  transferLockupUntilLockedBy: string;
};

export type InitParamsStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStruct;
  defaultProperties: MeemPropertiesStruct;
  defaultChildProperties: MeemPropertiesStruct;
  admins: string[];
  tokenCounterStart: BigNumberish;
  childDepth: BigNumberish;
  nonOwnerSplitAllocationAmount: BigNumberish;
};

export type InitParamsStructOutput = [
  string,
  string,
  string,
  BasePropertiesStructOutput,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  string[],
  BigNumber,
  BigNumber,
  BigNumber
] & {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStructOutput;
  defaultProperties: MeemPropertiesStructOutput;
  defaultChildProperties: MeemPropertiesStructOutput;
  admins: string[];
  tokenCounterStart: BigNumber;
  childDepth: BigNumber;
  nonOwnerSplitAllocationAmount: BigNumber;
};

export type MeemMintParametersStruct = {
  to: string;
  tokenURI: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  meemType: BigNumberish;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemMintParametersStructOutput = [
  string,
  string,
  number,
  string,
  BigNumber,
  number,
  boolean,
  string,
  number,
  string[]
] & {
  to: string;
  tokenURI: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  meemType: number;
  isURILocked: boolean;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type ContractInfoStruct = {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStruct;
  defaultProperties: MeemPropertiesStruct;
  defaultChildProperties: MeemPropertiesStruct;
  childDepth: BigNumberish;
  nonOwnerSplitAllocationAmount: BigNumberish;
};

export type ContractInfoStructOutput = [
  string,
  string,
  string,
  BasePropertiesStructOutput,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  BigNumber,
  BigNumber
] & {
  symbol: string;
  name: string;
  contractURI: string;
  baseProperties: BasePropertiesStructOutput;
  defaultProperties: MeemPropertiesStructOutput;
  defaultChildProperties: MeemPropertiesStructOutput;
  childDepth: BigNumber;
  nonOwnerSplitAllocationAmount: BigNumber;
};

export type MeemStruct = {
  owner: string;
  parentChain: BigNumberish;
  parent: string;
  parentTokenId: BigNumberish;
  rootChain: BigNumberish;
  root: string;
  rootTokenId: BigNumberish;
  generation: BigNumberish;
  properties: MeemPropertiesStruct;
  childProperties: MeemPropertiesStruct;
  mintedAt: BigNumberish;
  uriLockedBy: string;
  meemType: BigNumberish;
  mintedBy: string;
  uriSource: BigNumberish;
  reactionTypes: string[];
};

export type MeemStructOutput = [
  string,
  number,
  string,
  BigNumber,
  number,
  string,
  BigNumber,
  BigNumber,
  MeemPropertiesStructOutput,
  MeemPropertiesStructOutput,
  BigNumber,
  string,
  number,
  string,
  number,
  string[]
] & {
  owner: string;
  parentChain: number;
  parent: string;
  parentTokenId: BigNumber;
  rootChain: number;
  root: string;
  rootTokenId: BigNumber;
  generation: BigNumber;
  properties: MeemPropertiesStructOutput;
  childProperties: MeemPropertiesStructOutput;
  mintedAt: BigNumber;
  uriLockedBy: string;
  meemType: number;
  mintedBy: string;
  uriSource: number;
  reactionTypes: string[];
};

export type WrappedItemStruct = {
  chain: BigNumberish;
  contractAddress: string;
  tokenId: BigNumberish;
};

export type WrappedItemStructOutput = [number, string, BigNumber] & {
  chain: number;
  contractAddress: string;
  tokenId: BigNumber;
};

export type ReactionStruct = { reaction: string; count: BigNumberish };

export type ReactionStructOutput = [string, BigNumber] & {
  reaction: string;
  count: BigNumber;
};

export declare namespace LibPart {
  export type PartStruct = { account: string; value: BigNumberish };

  export type PartStructOutput = [string, BigNumber] & {
    account: string;
    value: BigNumber;
  };
}

export declare namespace IDiamondCuttable {
  export type FacetCutStruct = {
    target: string;
    action: BigNumberish;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = { target: string; selectors: BytesLike[] };

  export type FacetStructOutput = [string, string[]] & {
    target: string;
    selectors: string[];
  };
}

export interface MeemInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "addressClippings(address)": FunctionFragment;
    "clip(uint256)": FunctionFragment;
    "clippings(uint256)": FunctionFragment;
    "hasAddressClipped(uint256,address)": FunctionFragment;
    "numClippings(uint256)": FunctionFragment;
    "unClip(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerTokens(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "lockBaseSplits()": FunctionFragment;
    "lockIsTransferrable()": FunctionFragment;
    "lockIsTransferrable(uint256)": FunctionFragment;
    "lockMintDates()": FunctionFragment;
    "lockMintDates(uint256)": FunctionFragment;
    "lockMintPermissions()": FunctionFragment;
    "lockOriginalsPerWallet()": FunctionFragment;
    "lockTotalOriginalsSupply()": FunctionFragment;
    "lockTransferLockup()": FunctionFragment;
    "lockTransferLockup(uint256)": FunctionFragment;
    "reInitialize((string,string,string,(int256,address,(uint8,address[],uint256,address,uint256)[],address,(address,uint256,address)[],address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address[],uint256,int256,uint256))": FunctionFragment;
    "setBaseSplits((address,uint256,address)[])": FunctionFragment;
    "setChildDepth(int256)": FunctionFragment;
    "setContractInfo(string,string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setIsTransferrable(bool)": FunctionFragment;
    "setIsTransferrable(uint256,bool)": FunctionFragment;
    "setMintDates(int256,int256)": FunctionFragment;
    "setMintDates(uint256,int256,int256)": FunctionFragment;
    "setMintPermissions((uint8,address[],uint256,address,uint256)[])": FunctionFragment;
    "setNonOwnerSplitAllocationAmount(uint256)": FunctionFragment;
    "setOriginalsPerWallet(int256)": FunctionFragment;
    "setProperties(uint8,(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "setTokenCounter(uint256)": FunctionFragment;
    "setTokenRoot(uint256,uint8,address,uint256)": FunctionFragment;
    "setTotalOriginalsSupply(int256)": FunctionFragment;
    "setTransferLockup(uint256)": FunctionFragment;
    "setTransferLockup(uint256,uint256)": FunctionFragment;
    "mint((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "mintAndCopy((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address)": FunctionFragment;
    "mintAndRemix((address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(address,string,uint8,address,uint256,uint8,bool,address,uint8,string[]),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address))": FunctionFragment;
    "addPermission(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "lockCopiesPerWallet(uint256,uint8)": FunctionFragment;
    "lockPermissions(uint256,uint8,uint8)": FunctionFragment;
    "lockRemixesPerWallet(uint256,uint8)": FunctionFragment;
    "lockTotalCopies(uint256,uint8)": FunctionFragment;
    "lockTotalRemixes(uint256,uint8)": FunctionFragment;
    "lockUri(uint256)": FunctionFragment;
    "removePermissionAt(uint256,uint8,uint8,uint256)": FunctionFragment;
    "setCopiesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setData(uint256,string)": FunctionFragment;
    "setPermissions(uint256,uint8,uint8,(uint8,address[],uint256,address,uint256)[])": FunctionFragment;
    "setRemixesPerWallet(uint256,uint8,int256)": FunctionFragment;
    "setTokenUri(uint256,string)": FunctionFragment;
    "setTotalCopies(uint256,uint8,int256)": FunctionFragment;
    "setTotalRemixes(uint256,uint8,int256)": FunctionFragment;
    "setURISource(uint256,uint8)": FunctionFragment;
    "updatePermissionAt(uint256,uint8,uint8,uint256,(uint8,address[],uint256,address,uint256))": FunctionFragment;
    "childDepth()": FunctionFragment;
    "copiesOf(uint256)": FunctionFragment;
    "getBaseProperties()": FunctionFragment;
    "getContractInfo()": FunctionFragment;
    "getDefaultProperties(uint8)": FunctionFragment;
    "getMeem(uint256)": FunctionFragment;
    "getRoles(bytes32)": FunctionFragment;
    "isNFTWrapped(uint8,address,uint256)": FunctionFragment;
    "numCopiesOf(uint256)": FunctionFragment;
    "numRemixesOf(uint256)": FunctionFragment;
    "ownedCopiesOf(uint256,address)": FunctionFragment;
    "ownedRemixesOf(uint256,address)": FunctionFragment;
    "remixesOf(uint256)": FunctionFragment;
    "tokenIdOfOwnerIndex(address,uint256)": FunctionFragment;
    "tokenIdsOfOwner(address)": FunctionFragment;
    "wrappedTokens((uint8,address,uint256)[])": FunctionFragment;
    "addSplit(uint256,uint8,(address,uint256,address))": FunctionFragment;
    "getRaribleV2Royalties(uint256)": FunctionFragment;
    "lockSplits(uint256,uint8)": FunctionFragment;
    "nonOwnerSplitAllocationAmount()": FunctionFragment;
    "removeSplitAt(uint256,uint8,uint256)": FunctionFragment;
    "setSplits(uint256,uint8,(address,uint256,address)[])": FunctionFragment;
    "updateSplitAt(uint256,uint8,uint256,(address,uint256,address))": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addReaction(uint256,string)": FunctionFragment;
    "getReactedAt(uint256,address,string)": FunctionFragment;
    "getReactions(uint256)": FunctionFragment;
    "removeReaction(uint256,string)": FunctionFragment;
    "setReactionTypes(uint256,string[])": FunctionFragment;
    "init((string,string,string,(int256,address,(uint8,address[],uint256,address,uint256)[],address,(address,uint256,address)[],address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),(int256,address,int256,address,(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],(uint8,address[],uint256,address,uint256)[],address,address,address,(address,uint256,address)[],address,int256,address,int256,address,bool,address,int256,int256,address,uint256,address),address[],uint256,int256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "MINTER_ROLE"
      | "grantRole"
      | "hasRole"
      | "revokeRole"
      | "addressClippings"
      | "clip"
      | "clippings"
      | "hasAddressClipped"
      | "numClippings"
      | "unClip"
      | "approve"
      | "balanceOf"
      | "baseTokenURI"
      | "burn"
      | "contractAddress"
      | "contractURI"
      | "getApproved"
      | "isApprovedForAll"
      | "name"
      | "onERC721Received"
      | "ownerOf"
      | "ownerTokens"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "lockBaseSplits"
      | "lockIsTransferrable()"
      | "lockIsTransferrable(uint256)"
      | "lockMintDates()"
      | "lockMintDates(uint256)"
      | "lockMintPermissions"
      | "lockOriginalsPerWallet"
      | "lockTotalOriginalsSupply"
      | "lockTransferLockup()"
      | "lockTransferLockup(uint256)"
      | "reInitialize"
      | "setBaseSplits"
      | "setChildDepth"
      | "setContractInfo"
      | "setContractURI"
      | "setIsTransferrable(bool)"
      | "setIsTransferrable(uint256,bool)"
      | "setMintDates(int256,int256)"
      | "setMintDates(uint256,int256,int256)"
      | "setMintPermissions"
      | "setNonOwnerSplitAllocationAmount"
      | "setOriginalsPerWallet"
      | "setProperties"
      | "setTokenCounter"
      | "setTokenRoot"
      | "setTotalOriginalsSupply"
      | "setTransferLockup(uint256)"
      | "setTransferLockup(uint256,uint256)"
      | "mint"
      | "mintAndCopy"
      | "mintAndRemix"
      | "addPermission"
      | "lockCopiesPerWallet"
      | "lockPermissions"
      | "lockRemixesPerWallet"
      | "lockTotalCopies"
      | "lockTotalRemixes"
      | "lockUri"
      | "removePermissionAt"
      | "setCopiesPerWallet"
      | "setData"
      | "setPermissions"
      | "setRemixesPerWallet"
      | "setTokenUri"
      | "setTotalCopies"
      | "setTotalRemixes"
      | "setURISource"
      | "updatePermissionAt"
      | "childDepth"
      | "copiesOf"
      | "getBaseProperties"
      | "getContractInfo"
      | "getDefaultProperties"
      | "getMeem"
      | "getRoles"
      | "isNFTWrapped"
      | "numCopiesOf"
      | "numRemixesOf"
      | "ownedCopiesOf"
      | "ownedRemixesOf"
      | "remixesOf"
      | "tokenIdOfOwnerIndex"
      | "tokenIdsOfOwner"
      | "wrappedTokens"
      | "addSplit"
      | "getRaribleV2Royalties"
      | "lockSplits"
      | "nonOwnerSplitAllocationAmount"
      | "removeSplitAt"
      | "setSplits"
      | "updateSplitAt"
      | "acceptOwnership"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getFallbackAddress"
      | "nomineeOwner"
      | "owner"
      | "setFallbackAddress"
      | "supportsInterface"
      | "transferOwnership"
      | "addReaction"
      | "getReactedAt"
      | "getReactions"
      | "removeReaction"
      | "setReactionTypes"
      | "init"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressClippings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "clip", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "clippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAddressClipped",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "numClippings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unClip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBaseSplits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockIsTransferrable()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockIsTransferrable(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockMintDates()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMintDates(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockMintPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockOriginalsPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalOriginalsSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTransferLockup()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTransferLockup(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reInitialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseSplits",
    values: [SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTransferrable(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTransferrable(uint256,bool)",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintDates(int256,int256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintDates(uint256,int256,int256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPermissions",
    values: [MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginalsPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProperties",
    values: [BigNumberish, MeemPropertiesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoot",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalOriginalsSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferLockup(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferLockup(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndCopy",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndRemix",
    values: [
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct,
      MeemMintParametersStruct,
      MeemPropertiesStruct,
      MeemPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermission",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCopiesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRemixesPerWallet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalCopies",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTotalRemixes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCopiesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [BigNumberish, BigNumberish, BigNumberish, MeemPermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemixesPerWallet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalCopies",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalRemixes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setURISource",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePermissionAt",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      MeemPermissionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "childDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "copiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseProperties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultProperties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRoles", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isNFTWrapped",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numCopiesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numRemixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedCopiesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedRemixesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "remixesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdOfOwnerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [WrappedItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSplit",
    values: [BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaribleV2Royalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSplits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonOwnerSplitAllocationAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSplits",
    values: [BigNumberish, BigNumberish, SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplitAt",
    values: [BigNumberish, BigNumberish, BigNumberish, SplitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCuttable.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactedAt",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReactionTypes",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [InitParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clippings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAddressClipped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numClippings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unClip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBaseSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockIsTransferrable()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockIsTransferrable(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMintDates()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMintDates(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockOriginalsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalOriginalsSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTransferLockup()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTransferLockup(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTransferrable(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTransferrable(uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintDates(int256,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintDates(uint256,int256,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginalsPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalOriginalsSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferLockup(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferLockup(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndRemix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopiesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemixesPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalCopies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalRemixes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setURISource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePermissionAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "childDepth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copiesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedCopiesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedRemixesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remixesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdOfOwnerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSplit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaribleV2Royalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonOwnerSplitAllocationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSplits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSplitAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReactionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "MeemRoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "MeemRoleGranted(bytes32,address,address)": EventFragment;
    "MeemRoleRevoked(bytes32,address,address)": EventFragment;
    "MeemRoleSet(bytes32,address[],address)": EventFragment;
    "MeemContractInitialized(address)": EventFragment;
    "MeemBaseMintDatesLocked(address)": EventFragment;
    "MeemBaseMintDatesSet(int256,int256)": EventFragment;
    "MeemIsTransferrableLocked(address)": EventFragment;
    "MeemIsTransferrableSet(bool)": EventFragment;
    "MeemMintPermissionsLocked(address)": EventFragment;
    "MeemMintPermissionsSet(tuple[])": EventFragment;
    "MeemOriginalsPerWalletLocked(address)": EventFragment;
    "MeemOriginalsPerWalletSet(int256)": EventFragment;
    "MeemSplitsLocked(address)": EventFragment;
    "MeemSplitsSet(tuple[])": EventFragment;
    "MeemSplitsSet(uint256,uint8,tuple[])": EventFragment;
    "MeemTotalOriginalsSupplyLocked(address)": EventFragment;
    "MeemTotalOriginalsSupplySet(int256)": EventFragment;
    "MeemApproval(address,address,uint256)": EventFragment;
    "MeemApprovalForAll(address,address,bool)": EventFragment;
    "MeemTransfer(address,address,uint256)": EventFragment;
    "MeemClipped(uint256,address)": EventFragment;
    "MeemCopiesPerWalletLocked(uint256,uint8,address)": EventFragment;
    "MeemCopiesPerWalletSet(uint256,uint8,int256)": EventFragment;
    "MeemDataSet(uint256,string)": EventFragment;
    "MeemMintDatesLocked(uint256,address)": EventFragment;
    "MeemMintDatesSet(uint256,int256,int256)": EventFragment;
    "MeemPermissionsSet(uint256,uint8,uint8,tuple[])": EventFragment;
    "MeemPropertiesSet(uint256,uint8,tuple)": EventFragment;
    "MeemRemixesPerWalletLocked(uint256,uint8,address)": EventFragment;
    "MeemRemixesPerWalletSet(uint256,uint8,int256)": EventFragment;
    "MeemTokenReactionAdded(uint256,address,string,uint256)": EventFragment;
    "MeemTokenReactionRemoved(uint256,address,string,uint256)": EventFragment;
    "MeemTokenReactionTypesSet(uint256,string[])": EventFragment;
    "MeemTotalCopiesLocked(uint256,uint8,address)": EventFragment;
    "MeemTotalCopiesSet(uint256,uint8,int256)": EventFragment;
    "MeemTotalRemixesLocked(uint256,uint8,address)": EventFragment;
    "MeemTotalRemixesSet(uint256,uint8,int256)": EventFragment;
    "MeemURILockedBySet(uint256,address)": EventFragment;
    "MeemURISet(uint256,string)": EventFragment;
    "MeemURISourceSet(uint256,uint8)": EventFragment;
    "MeemUnClipped(uint256,address)": EventFragment;
    "RoyaltiesSet(uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRoleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemContractInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemBaseMintDatesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemBaseMintDatesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemIsTransferrableLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemIsTransferrableSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMintPermissionsLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMintPermissionsSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MeemOriginalsPerWalletLocked"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemOriginalsPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemSplitsLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemSplitsSet(tuple[])"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MeemSplitsSet(uint256,uint8,tuple[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MeemTotalOriginalsSupplyLocked"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MeemTotalOriginalsSupplySet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemClipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemCopiesPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemCopiesPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemDataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMintDatesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemMintDatesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemPermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemPropertiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRemixesPerWalletLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemRemixesPerWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTokenReactionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTokenReactionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTokenReactionTypesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTotalCopiesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTotalCopiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTotalRemixesLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemTotalRemixesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemURILockedBySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemURISourceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MeemUnClipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesSet"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  operator: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DiamondCutEventObject {
  facetCuts: IDiamondCuttable.FacetCutStructOutput[];
  target: string;
  data: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCuttable.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MeemRoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type MeemRoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  MeemRoleAdminChangedEventObject
>;

export type MeemRoleAdminChangedEventFilter =
  TypedEventFilter<MeemRoleAdminChangedEvent>;

export interface MeemRoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type MeemRoleGrantedEvent = TypedEvent<
  [string, string, string],
  MeemRoleGrantedEventObject
>;

export type MeemRoleGrantedEventFilter = TypedEventFilter<MeemRoleGrantedEvent>;

export interface MeemRoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type MeemRoleRevokedEvent = TypedEvent<
  [string, string, string],
  MeemRoleRevokedEventObject
>;

export type MeemRoleRevokedEventFilter = TypedEventFilter<MeemRoleRevokedEvent>;

export interface MeemRoleSetEventObject {
  role: string;
  account: string[];
  sender: string;
}
export type MeemRoleSetEvent = TypedEvent<
  [string, string[], string],
  MeemRoleSetEventObject
>;

export type MeemRoleSetEventFilter = TypedEventFilter<MeemRoleSetEvent>;

export interface MeemContractInitializedEventObject {
  contractAddress: string;
}
export type MeemContractInitializedEvent = TypedEvent<
  [string],
  MeemContractInitializedEventObject
>;

export type MeemContractInitializedEventFilter =
  TypedEventFilter<MeemContractInitializedEvent>;

export interface MeemBaseMintDatesLockedEventObject {
  lockedBy: string;
}
export type MeemBaseMintDatesLockedEvent = TypedEvent<
  [string],
  MeemBaseMintDatesLockedEventObject
>;

export type MeemBaseMintDatesLockedEventFilter =
  TypedEventFilter<MeemBaseMintDatesLockedEvent>;

export interface MeemBaseMintDatesSetEventObject {
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
}
export type MeemBaseMintDatesSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MeemBaseMintDatesSetEventObject
>;

export type MeemBaseMintDatesSetEventFilter =
  TypedEventFilter<MeemBaseMintDatesSetEvent>;

export interface MeemIsTransferrableLockedEventObject {
  lockedBy: string;
}
export type MeemIsTransferrableLockedEvent = TypedEvent<
  [string],
  MeemIsTransferrableLockedEventObject
>;

export type MeemIsTransferrableLockedEventFilter =
  TypedEventFilter<MeemIsTransferrableLockedEvent>;

export interface MeemIsTransferrableSetEventObject {
  isTransferrable: boolean;
}
export type MeemIsTransferrableSetEvent = TypedEvent<
  [boolean],
  MeemIsTransferrableSetEventObject
>;

export type MeemIsTransferrableSetEventFilter =
  TypedEventFilter<MeemIsTransferrableSetEvent>;

export interface MeemMintPermissionsLockedEventObject {
  lockedBy: string;
}
export type MeemMintPermissionsLockedEvent = TypedEvent<
  [string],
  MeemMintPermissionsLockedEventObject
>;

export type MeemMintPermissionsLockedEventFilter =
  TypedEventFilter<MeemMintPermissionsLockedEvent>;

export interface MeemMintPermissionsSetEventObject {
  mintPermissions: MeemPermissionStructOutput[];
}
export type MeemMintPermissionsSetEvent = TypedEvent<
  [MeemPermissionStructOutput[]],
  MeemMintPermissionsSetEventObject
>;

export type MeemMintPermissionsSetEventFilter =
  TypedEventFilter<MeemMintPermissionsSetEvent>;

export interface MeemOriginalsPerWalletLockedEventObject {
  lockedBy: string;
}
export type MeemOriginalsPerWalletLockedEvent = TypedEvent<
  [string],
  MeemOriginalsPerWalletLockedEventObject
>;

export type MeemOriginalsPerWalletLockedEventFilter =
  TypedEventFilter<MeemOriginalsPerWalletLockedEvent>;

export interface MeemOriginalsPerWalletSetEventObject {
  originalsPerWallet: BigNumber;
}
export type MeemOriginalsPerWalletSetEvent = TypedEvent<
  [BigNumber],
  MeemOriginalsPerWalletSetEventObject
>;

export type MeemOriginalsPerWalletSetEventFilter =
  TypedEventFilter<MeemOriginalsPerWalletSetEvent>;

export interface MeemSplitsLockedEventObject {
  lockedBy: string;
}
export type MeemSplitsLockedEvent = TypedEvent<
  [string],
  MeemSplitsLockedEventObject
>;

export type MeemSplitsLockedEventFilter =
  TypedEventFilter<MeemSplitsLockedEvent>;

export interface MeemSplitsSet_tuple_array_EventObject {
  splits: SplitStructOutput[];
}
export type MeemSplitsSet_tuple_array_Event = TypedEvent<
  [SplitStructOutput[]],
  MeemSplitsSet_tuple_array_EventObject
>;

export type MeemSplitsSet_tuple_array_EventFilter =
  TypedEventFilter<MeemSplitsSet_tuple_array_Event>;

export interface MeemSplitsSet_uint256_uint8_tuple_array_EventObject {
  tokenId: BigNumber;
  propertyType: number;
  splits: SplitStructOutput[];
}
export type MeemSplitsSet_uint256_uint8_tuple_array_Event = TypedEvent<
  [BigNumber, number, SplitStructOutput[]],
  MeemSplitsSet_uint256_uint8_tuple_array_EventObject
>;

export type MeemSplitsSet_uint256_uint8_tuple_array_EventFilter =
  TypedEventFilter<MeemSplitsSet_uint256_uint8_tuple_array_Event>;

export interface MeemTotalOriginalsSupplyLockedEventObject {
  lockedBy: string;
}
export type MeemTotalOriginalsSupplyLockedEvent = TypedEvent<
  [string],
  MeemTotalOriginalsSupplyLockedEventObject
>;

export type MeemTotalOriginalsSupplyLockedEventFilter =
  TypedEventFilter<MeemTotalOriginalsSupplyLockedEvent>;

export interface MeemTotalOriginalsSupplySetEventObject {
  totalOriginalsSupply: BigNumber;
}
export type MeemTotalOriginalsSupplySetEvent = TypedEvent<
  [BigNumber],
  MeemTotalOriginalsSupplySetEventObject
>;

export type MeemTotalOriginalsSupplySetEventFilter =
  TypedEventFilter<MeemTotalOriginalsSupplySetEvent>;

export interface MeemApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type MeemApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  MeemApprovalEventObject
>;

export type MeemApprovalEventFilter = TypedEventFilter<MeemApprovalEvent>;

export interface MeemApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type MeemApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  MeemApprovalForAllEventObject
>;

export type MeemApprovalForAllEventFilter =
  TypedEventFilter<MeemApprovalForAllEvent>;

export interface MeemTransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type MeemTransferEvent = TypedEvent<
  [string, string, BigNumber],
  MeemTransferEventObject
>;

export type MeemTransferEventFilter = TypedEventFilter<MeemTransferEvent>;

export interface MeemClippedEventObject {
  tokenId: BigNumber;
  addy: string;
}
export type MeemClippedEvent = TypedEvent<
  [BigNumber, string],
  MeemClippedEventObject
>;

export type MeemClippedEventFilter = TypedEventFilter<MeemClippedEvent>;

export interface MeemCopiesPerWalletLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type MeemCopiesPerWalletLockedEvent = TypedEvent<
  [BigNumber, number, string],
  MeemCopiesPerWalletLockedEventObject
>;

export type MeemCopiesPerWalletLockedEventFilter =
  TypedEventFilter<MeemCopiesPerWalletLockedEvent>;

export interface MeemCopiesPerWalletSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalCopies: BigNumber;
}
export type MeemCopiesPerWalletSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MeemCopiesPerWalletSetEventObject
>;

export type MeemCopiesPerWalletSetEventFilter =
  TypedEventFilter<MeemCopiesPerWalletSetEvent>;

export interface MeemDataSetEventObject {
  tokenId: BigNumber;
  data: string;
}
export type MeemDataSetEvent = TypedEvent<
  [BigNumber, string],
  MeemDataSetEventObject
>;

export type MeemDataSetEventFilter = TypedEventFilter<MeemDataSetEvent>;

export interface MeemMintDatesLockedEventObject {
  tokenId: BigNumber;
  lockedBy: string;
}
export type MeemMintDatesLockedEvent = TypedEvent<
  [BigNumber, string],
  MeemMintDatesLockedEventObject
>;

export type MeemMintDatesLockedEventFilter =
  TypedEventFilter<MeemMintDatesLockedEvent>;

export interface MeemMintDatesSetEventObject {
  tokenId: BigNumber;
  mintStartTimestamp: BigNumber;
  mintEndTimestamp: BigNumber;
}
export type MeemMintDatesSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MeemMintDatesSetEventObject
>;

export type MeemMintDatesSetEventFilter =
  TypedEventFilter<MeemMintDatesSetEvent>;

export interface MeemPermissionsSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  permissionType: number;
  permission: MeemPermissionStructOutput[];
}
export type MeemPermissionsSetEvent = TypedEvent<
  [BigNumber, number, number, MeemPermissionStructOutput[]],
  MeemPermissionsSetEventObject
>;

export type MeemPermissionsSetEventFilter =
  TypedEventFilter<MeemPermissionsSetEvent>;

export interface MeemPropertiesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  props: MeemPropertiesStructOutput;
}
export type MeemPropertiesSetEvent = TypedEvent<
  [BigNumber, number, MeemPropertiesStructOutput],
  MeemPropertiesSetEventObject
>;

export type MeemPropertiesSetEventFilter =
  TypedEventFilter<MeemPropertiesSetEvent>;

export interface MeemRemixesPerWalletLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type MeemRemixesPerWalletLockedEvent = TypedEvent<
  [BigNumber, number, string],
  MeemRemixesPerWalletLockedEventObject
>;

export type MeemRemixesPerWalletLockedEventFilter =
  TypedEventFilter<MeemRemixesPerWalletLockedEvent>;

export interface MeemRemixesPerWalletSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalRemixes: BigNumber;
}
export type MeemRemixesPerWalletSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MeemRemixesPerWalletSetEventObject
>;

export type MeemRemixesPerWalletSetEventFilter =
  TypedEventFilter<MeemRemixesPerWalletSetEvent>;

export interface MeemTokenReactionAddedEventObject {
  tokenId: BigNumber;
  addy: string;
  reaction: string;
  newTotalReactions: BigNumber;
}
export type MeemTokenReactionAddedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  MeemTokenReactionAddedEventObject
>;

export type MeemTokenReactionAddedEventFilter =
  TypedEventFilter<MeemTokenReactionAddedEvent>;

export interface MeemTokenReactionRemovedEventObject {
  tokenId: BigNumber;
  addy: string;
  reaction: string;
  newTotalReactions: BigNumber;
}
export type MeemTokenReactionRemovedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  MeemTokenReactionRemovedEventObject
>;

export type MeemTokenReactionRemovedEventFilter =
  TypedEventFilter<MeemTokenReactionRemovedEvent>;

export interface MeemTokenReactionTypesSetEventObject {
  tokenId: BigNumber;
  reactionTypes: string[];
}
export type MeemTokenReactionTypesSetEvent = TypedEvent<
  [BigNumber, string[]],
  MeemTokenReactionTypesSetEventObject
>;

export type MeemTokenReactionTypesSetEventFilter =
  TypedEventFilter<MeemTokenReactionTypesSetEvent>;

export interface MeemTotalCopiesLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type MeemTotalCopiesLockedEvent = TypedEvent<
  [BigNumber, number, string],
  MeemTotalCopiesLockedEventObject
>;

export type MeemTotalCopiesLockedEventFilter =
  TypedEventFilter<MeemTotalCopiesLockedEvent>;

export interface MeemTotalCopiesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalCopies: BigNumber;
}
export type MeemTotalCopiesSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MeemTotalCopiesSetEventObject
>;

export type MeemTotalCopiesSetEventFilter =
  TypedEventFilter<MeemTotalCopiesSetEvent>;

export interface MeemTotalRemixesLockedEventObject {
  tokenId: BigNumber;
  propertyType: number;
  lockedBy: string;
}
export type MeemTotalRemixesLockedEvent = TypedEvent<
  [BigNumber, number, string],
  MeemTotalRemixesLockedEventObject
>;

export type MeemTotalRemixesLockedEventFilter =
  TypedEventFilter<MeemTotalRemixesLockedEvent>;

export interface MeemTotalRemixesSetEventObject {
  tokenId: BigNumber;
  propertyType: number;
  newTotalRemixes: BigNumber;
}
export type MeemTotalRemixesSetEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  MeemTotalRemixesSetEventObject
>;

export type MeemTotalRemixesSetEventFilter =
  TypedEventFilter<MeemTotalRemixesSetEvent>;

export interface MeemURILockedBySetEventObject {
  tokenId: BigNumber;
  lockedBy: string;
}
export type MeemURILockedBySetEvent = TypedEvent<
  [BigNumber, string],
  MeemURILockedBySetEventObject
>;

export type MeemURILockedBySetEventFilter =
  TypedEventFilter<MeemURILockedBySetEvent>;

export interface MeemURISetEventObject {
  tokenId: BigNumber;
  uri: string;
}
export type MeemURISetEvent = TypedEvent<
  [BigNumber, string],
  MeemURISetEventObject
>;

export type MeemURISetEventFilter = TypedEventFilter<MeemURISetEvent>;

export interface MeemURISourceSetEventObject {
  tokenId: BigNumber;
  uriSource: number;
}
export type MeemURISourceSetEvent = TypedEvent<
  [BigNumber, number],
  MeemURISourceSetEventObject
>;

export type MeemURISourceSetEventFilter =
  TypedEventFilter<MeemURISourceSetEvent>;

export interface MeemUnClippedEventObject {
  tokenId: BigNumber;
  addy: string;
}
export type MeemUnClippedEvent = TypedEvent<
  [BigNumber, string],
  MeemUnClippedEventObject
>;

export type MeemUnClippedEventFilter = TypedEventFilter<MeemUnClippedEvent>;

export interface RoyaltiesSetEventObject {
  tokenId: BigNumber;
  royalties: LibPart.PartStructOutput[];
}
export type RoyaltiesSetEvent = TypedEvent<
  [BigNumber, LibPart.PartStructOutput[]],
  RoyaltiesSetEventObject
>;

export type RoyaltiesSetEventFilter = TypedEventFilter<RoyaltiesSetEvent>;

export interface Meem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    childDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBaseProperties(
      overrides?: CallOverrides
    ): Promise<[BasePropertiesStructOutput]>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<[ContractInfoStructOutput]>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemPropertiesStructOutput]>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MeemStructOutput]>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIds_: BigNumber[] }>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LibPart.PartStructOutput[]]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        diamondFacets: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ReactionStructOutput[]]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressClippings(
    addy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  clip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasAddressClipped(
    tokenId: BigNumberish,
    addy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numClippings(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unClip(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockBaseSplits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockIsTransferrable()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockIsTransferrable(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockMintDates()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockMintDates(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockMintPermissions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockOriginalsPerWallet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalOriginalsSupply(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTransferLockup()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTransferLockup(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reInitialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseSplits(
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildDepth(
    newChildDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractInfo(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIsTransferrable(bool)"(
    isTransferrable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIsTransferrable(uint256,bool)"(
    tokenId: BigNumberish,
    isTransferrable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMintDates(int256,int256)"(
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMintDates(uint256,int256,int256)"(
    tokenId: BigNumberish,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintPermissions(
    permissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonOwnerSplitAllocationAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOriginalsPerWallet(
    originalsPerWallet: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProperties(
    propertyType: BigNumberish,
    props: MeemPropertiesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCounter(
    tokenCounter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoot(
    tokenId: BigNumberish,
    rootChain: BigNumberish,
    root: string,
    rootTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalOriginalsSupply(
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTransferLockup(uint256)"(
    lockupUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTransferLockup(uint256,uint256)"(
    tokenId: BigNumberish,
    lockupUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndCopy(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    toCopyAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndRemix(
    params: MeemMintParametersStruct,
    properties: MeemPropertiesStruct,
    childProperties: MeemPropertiesStruct,
    remixParams: MeemMintParametersStruct,
    remixProperties: MeemPropertiesStruct,
    remixChildProperties: MeemPropertiesStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPermission(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockUri(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCopiesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setData(
    tokenId: BigNumberish,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    permissions: MeemPermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemixesPerWallet(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenUri(
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalCopies(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalCopies: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTotalRemixes(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    newTotalRemixes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURISource(
    tokenId: BigNumberish,
    uriSource: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePermissionAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    permissionType: BigNumberish,
    idx: BigNumberish,
    permission: MeemPermissionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  childDepth(overrides?: CallOverrides): Promise<BigNumber>;

  copiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBaseProperties(
    overrides?: CallOverrides
  ): Promise<BasePropertiesStructOutput>;

  getContractInfo(overrides?: CallOverrides): Promise<ContractInfoStructOutput>;

  getDefaultProperties(
    propertyType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemPropertiesStructOutput>;

  getMeem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MeemStructOutput>;

  getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  isNFTWrapped(
    chain: BigNumberish,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numCopiesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numRemixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownedCopiesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ownedRemixesOf(
    tokenId: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  remixesOf(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenIdOfOwnerIndex(
    _owner: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdsOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  wrappedTokens(
    items: WrappedItemStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addSplit(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRaribleV2Royalties(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LibPart.PartStructOutput[]>;

  lockSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonOwnerSplitAllocationAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSplits(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    splits: SplitStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSplitAt(
    tokenId: BigNumberish,
    propertyType: BigNumberish,
    idx: BigNumberish,
    split: SplitStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: IDiamondCuttable.FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReactedAt(
    tokenId: BigNumberish,
    addy: string,
    reaction: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReactions(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ReactionStructOutput[]>;

  removeReaction(
    tokenId: BigNumberish,
    reaction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReactionTypes(
    tokenId: BigNumberish,
    reactionTypes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    clip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockBaseSplits(overrides?: CallOverrides): Promise<void>;

    "lockIsTransferrable()"(overrides?: CallOverrides): Promise<void>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockMintDates()"(overrides?: CallOverrides): Promise<void>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockMintPermissions(overrides?: CallOverrides): Promise<void>;

    lockOriginalsPerWallet(overrides?: CallOverrides): Promise<void>;

    lockTotalOriginalsSupply(overrides?: CallOverrides): Promise<void>;

    "lockTransferLockup()"(overrides?: CallOverrides): Promise<void>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockUri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBaseProperties(
      overrides?: CallOverrides
    ): Promise<BasePropertiesStructOutput>;

    getContractInfo(
      overrides?: CallOverrides
    ): Promise<ContractInfoStructOutput>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemPropertiesStructOutput>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MeemStructOutput>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LibPart.PartStructOutput[]>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ReactionStructOutput[]>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    init(params: InitParamsStruct, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      operator?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "MeemRoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): MeemRoleAdminChangedEventFilter;
    MeemRoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): MeemRoleAdminChangedEventFilter;

    "MeemRoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): MeemRoleGrantedEventFilter;
    MeemRoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): MeemRoleGrantedEventFilter;

    "MeemRoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): MeemRoleRevokedEventFilter;
    MeemRoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): MeemRoleRevokedEventFilter;

    "MeemRoleSet(bytes32,address[],address)"(
      role?: BytesLike | null,
      account?: string[] | null,
      sender?: string | null
    ): MeemRoleSetEventFilter;
    MeemRoleSet(
      role?: BytesLike | null,
      account?: string[] | null,
      sender?: string | null
    ): MeemRoleSetEventFilter;

    "MeemContractInitialized(address)"(
      contractAddress?: null
    ): MeemContractInitializedEventFilter;
    MeemContractInitialized(
      contractAddress?: null
    ): MeemContractInitializedEventFilter;

    "MeemBaseMintDatesLocked(address)"(
      lockedBy?: null
    ): MeemBaseMintDatesLockedEventFilter;
    MeemBaseMintDatesLocked(
      lockedBy?: null
    ): MeemBaseMintDatesLockedEventFilter;

    "MeemBaseMintDatesSet(int256,int256)"(
      mintStartTimestamp?: null,
      mintEndTimestamp?: null
    ): MeemBaseMintDatesSetEventFilter;
    MeemBaseMintDatesSet(
      mintStartTimestamp?: null,
      mintEndTimestamp?: null
    ): MeemBaseMintDatesSetEventFilter;

    "MeemIsTransferrableLocked(address)"(
      lockedBy?: null
    ): MeemIsTransferrableLockedEventFilter;
    MeemIsTransferrableLocked(
      lockedBy?: null
    ): MeemIsTransferrableLockedEventFilter;

    "MeemIsTransferrableSet(bool)"(
      isTransferrable?: null
    ): MeemIsTransferrableSetEventFilter;
    MeemIsTransferrableSet(
      isTransferrable?: null
    ): MeemIsTransferrableSetEventFilter;

    "MeemMintPermissionsLocked(address)"(
      lockedBy?: null
    ): MeemMintPermissionsLockedEventFilter;
    MeemMintPermissionsLocked(
      lockedBy?: null
    ): MeemMintPermissionsLockedEventFilter;

    "MeemMintPermissionsSet(tuple[])"(
      mintPermissions?: null
    ): MeemMintPermissionsSetEventFilter;
    MeemMintPermissionsSet(
      mintPermissions?: null
    ): MeemMintPermissionsSetEventFilter;

    "MeemOriginalsPerWalletLocked(address)"(
      lockedBy?: null
    ): MeemOriginalsPerWalletLockedEventFilter;
    MeemOriginalsPerWalletLocked(
      lockedBy?: null
    ): MeemOriginalsPerWalletLockedEventFilter;

    "MeemOriginalsPerWalletSet(int256)"(
      originalsPerWallet?: null
    ): MeemOriginalsPerWalletSetEventFilter;
    MeemOriginalsPerWalletSet(
      originalsPerWallet?: null
    ): MeemOriginalsPerWalletSetEventFilter;

    "MeemSplitsLocked(address)"(lockedBy?: null): MeemSplitsLockedEventFilter;
    MeemSplitsLocked(lockedBy?: null): MeemSplitsLockedEventFilter;

    "MeemSplitsSet(tuple[])"(
      splits?: null
    ): MeemSplitsSet_tuple_array_EventFilter;
    "MeemSplitsSet(uint256,uint8,tuple[])"(
      tokenId?: null,
      propertyType?: null,
      splits?: null
    ): MeemSplitsSet_uint256_uint8_tuple_array_EventFilter;

    "MeemTotalOriginalsSupplyLocked(address)"(
      lockedBy?: null
    ): MeemTotalOriginalsSupplyLockedEventFilter;
    MeemTotalOriginalsSupplyLocked(
      lockedBy?: null
    ): MeemTotalOriginalsSupplyLockedEventFilter;

    "MeemTotalOriginalsSupplySet(int256)"(
      totalOriginalsSupply?: null
    ): MeemTotalOriginalsSupplySetEventFilter;
    MeemTotalOriginalsSupplySet(
      totalOriginalsSupply?: null
    ): MeemTotalOriginalsSupplySetEventFilter;

    "MeemApproval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): MeemApprovalEventFilter;
    MeemApproval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): MeemApprovalEventFilter;

    "MeemApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): MeemApprovalForAllEventFilter;
    MeemApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): MeemApprovalForAllEventFilter;

    "MeemTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): MeemTransferEventFilter;
    MeemTransfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): MeemTransferEventFilter;

    "MeemClipped(uint256,address)"(
      tokenId?: null,
      addy?: null
    ): MeemClippedEventFilter;
    MeemClipped(tokenId?: null, addy?: null): MeemClippedEventFilter;

    "MeemCopiesPerWalletLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemCopiesPerWalletLockedEventFilter;
    MeemCopiesPerWalletLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemCopiesPerWalletLockedEventFilter;

    "MeemCopiesPerWalletSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): MeemCopiesPerWalletSetEventFilter;
    MeemCopiesPerWalletSet(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): MeemCopiesPerWalletSetEventFilter;

    "MeemDataSet(uint256,string)"(
      tokenId?: null,
      data?: null
    ): MeemDataSetEventFilter;
    MeemDataSet(tokenId?: null, data?: null): MeemDataSetEventFilter;

    "MeemMintDatesLocked(uint256,address)"(
      tokenId?: null,
      lockedBy?: null
    ): MeemMintDatesLockedEventFilter;
    MeemMintDatesLocked(
      tokenId?: null,
      lockedBy?: null
    ): MeemMintDatesLockedEventFilter;

    "MeemMintDatesSet(uint256,int256,int256)"(
      tokenId?: null,
      mintStartTimestamp?: null,
      mintEndTimestamp?: null
    ): MeemMintDatesSetEventFilter;
    MeemMintDatesSet(
      tokenId?: null,
      mintStartTimestamp?: null,
      mintEndTimestamp?: null
    ): MeemMintDatesSetEventFilter;

    "MeemPermissionsSet(uint256,uint8,uint8,tuple[])"(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): MeemPermissionsSetEventFilter;
    MeemPermissionsSet(
      tokenId?: null,
      propertyType?: null,
      permissionType?: null,
      permission?: null
    ): MeemPermissionsSetEventFilter;

    "MeemPropertiesSet(uint256,uint8,tuple)"(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): MeemPropertiesSetEventFilter;
    MeemPropertiesSet(
      tokenId?: null,
      propertyType?: null,
      props?: null
    ): MeemPropertiesSetEventFilter;

    "MeemRemixesPerWalletLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemRemixesPerWalletLockedEventFilter;
    MeemRemixesPerWalletLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemRemixesPerWalletLockedEventFilter;

    "MeemRemixesPerWalletSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): MeemRemixesPerWalletSetEventFilter;
    MeemRemixesPerWalletSet(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): MeemRemixesPerWalletSetEventFilter;

    "MeemTokenReactionAdded(uint256,address,string,uint256)"(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): MeemTokenReactionAddedEventFilter;
    MeemTokenReactionAdded(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): MeemTokenReactionAddedEventFilter;

    "MeemTokenReactionRemoved(uint256,address,string,uint256)"(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): MeemTokenReactionRemovedEventFilter;
    MeemTokenReactionRemoved(
      tokenId?: null,
      addy?: null,
      reaction?: null,
      newTotalReactions?: null
    ): MeemTokenReactionRemovedEventFilter;

    "MeemTokenReactionTypesSet(uint256,string[])"(
      tokenId?: null,
      reactionTypes?: null
    ): MeemTokenReactionTypesSetEventFilter;
    MeemTokenReactionTypesSet(
      tokenId?: null,
      reactionTypes?: null
    ): MeemTokenReactionTypesSetEventFilter;

    "MeemTotalCopiesLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemTotalCopiesLockedEventFilter;
    MeemTotalCopiesLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemTotalCopiesLockedEventFilter;

    "MeemTotalCopiesSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): MeemTotalCopiesSetEventFilter;
    MeemTotalCopiesSet(
      tokenId?: null,
      propertyType?: null,
      newTotalCopies?: null
    ): MeemTotalCopiesSetEventFilter;

    "MeemTotalRemixesLocked(uint256,uint8,address)"(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemTotalRemixesLockedEventFilter;
    MeemTotalRemixesLocked(
      tokenId?: null,
      propertyType?: null,
      lockedBy?: null
    ): MeemTotalRemixesLockedEventFilter;

    "MeemTotalRemixesSet(uint256,uint8,int256)"(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): MeemTotalRemixesSetEventFilter;
    MeemTotalRemixesSet(
      tokenId?: null,
      propertyType?: null,
      newTotalRemixes?: null
    ): MeemTotalRemixesSetEventFilter;

    "MeemURILockedBySet(uint256,address)"(
      tokenId?: null,
      lockedBy?: null
    ): MeemURILockedBySetEventFilter;
    MeemURILockedBySet(
      tokenId?: null,
      lockedBy?: null
    ): MeemURILockedBySetEventFilter;

    "MeemURISet(uint256,string)"(
      tokenId?: null,
      uri?: null
    ): MeemURISetEventFilter;
    MeemURISet(tokenId?: null, uri?: null): MeemURISetEventFilter;

    "MeemURISourceSet(uint256,uint8)"(
      tokenId?: null,
      uriSource?: null
    ): MeemURISourceSetEventFilter;
    MeemURISourceSet(
      tokenId?: null,
      uriSource?: null
    ): MeemURISourceSetEventFilter;

    "MeemUnClipped(uint256,address)"(
      tokenId?: null,
      addy?: null
    ): MeemUnClippedEventFilter;
    MeemUnClipped(tokenId?: null, addy?: null): MeemUnClippedEventFilter;

    "RoyaltiesSet(uint256,tuple[])"(
      tokenId?: null,
      royalties?: null
    ): RoyaltiesSetEventFilter;
    RoyaltiesSet(tokenId?: null, royalties?: null): RoyaltiesSetEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTokens(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    childDepth(overrides?: CallOverrides): Promise<BigNumber>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseProperties(overrides?: CallOverrides): Promise<BigNumber>;

    getContractInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoles(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressClippings(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAddressClipped(
      tokenId: BigNumberish,
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numClippings(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unClip(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTokens(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockBaseSplits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockIsTransferrable()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockIsTransferrable(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockMintDates()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockMintDates(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockMintPermissions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockOriginalsPerWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalOriginalsSupply(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTransferLockup()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTransferLockup(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reInitialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseSplits(
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildDepth(
      newChildDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractInfo(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIsTransferrable(bool)"(
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIsTransferrable(uint256,bool)"(
      tokenId: BigNumberish,
      isTransferrable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMintDates(int256,int256)"(
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMintDates(uint256,int256,int256)"(
      tokenId: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintPermissions(
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonOwnerSplitAllocationAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOriginalsPerWallet(
      originalsPerWallet: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProperties(
      propertyType: BigNumberish,
      props: MeemPropertiesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCounter(
      tokenCounter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoot(
      tokenId: BigNumberish,
      rootChain: BigNumberish,
      root: string,
      rootTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalOriginalsSupply(
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTransferLockup(uint256)"(
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTransferLockup(uint256,uint256)"(
      tokenId: BigNumberish,
      lockupUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndCopy(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      toCopyAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndRemix(
      params: MeemMintParametersStruct,
      properties: MeemPropertiesStruct,
      childProperties: MeemPropertiesStruct,
      remixParams: MeemMintParametersStruct,
      remixProperties: MeemPropertiesStruct,
      remixChildProperties: MeemPropertiesStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPermission(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockUri(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCopiesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setData(
      tokenId: BigNumberish,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      permissions: MeemPermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemixesPerWallet(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenUri(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalCopies(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalCopies: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTotalRemixes(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      newTotalRemixes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURISource(
      tokenId: BigNumberish,
      uriSource: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePermissionAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      permissionType: BigNumberish,
      idx: BigNumberish,
      permission: MeemPermissionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    childDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    copiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseProperties(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDefaultProperties(
      propertyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoles(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNFTWrapped(
      chain: BigNumberish,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCopiesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numRemixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedCopiesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownedRemixesOf(
      tokenId: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remixesOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdOfOwnerIndex(
      _owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdsOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedTokens(
      items: WrappedItemStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSplit(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRaribleV2Royalties(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonOwnerSplitAllocationAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSplits(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      splits: SplitStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSplitAt(
      tokenId: BigNumberish,
      propertyType: BigNumberish,
      idx: BigNumberish,
      split: SplitStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReactedAt(
      tokenId: BigNumberish,
      addy: string,
      reaction: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReactions(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReaction(
      tokenId: BigNumberish,
      reaction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReactionTypes(
      tokenId: BigNumberish,
      reactionTypes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
