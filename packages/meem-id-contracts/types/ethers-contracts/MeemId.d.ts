/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MeemIdInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "ID_VERIFIER_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "createOrAddMeemID(address,string)": FunctionFragment;
    "getMeemIDByIndex(uint256)": FunctionFragment;
    "getMeemIDByTwitterId(string)": FunctionFragment;
    "getMeemIDByWalletAddress(address)": FunctionFragment;
    "getMeemIDIndexByTwitterId(string)": FunctionFragment;
    "getMeemIDIndexByWalletAddress(address)": FunctionFragment;
    "getNumberOfMeemIds()": FunctionFragment;
    "removeTwitterIdByTwitterId(string,string)": FunctionFragment;
    "removeTwitterIdByWalletAddress(address,string)": FunctionFragment;
    "removeWalletAddressByTwitterId(string,address)": FunctionFragment;
    "removeWalletAddressByWalletAddress(address,address)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "diamondCut(tuple[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getFallbackAddress()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFallbackAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ID_VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrAddMeemID",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemIDByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemIDByTwitterId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemIDByWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemIDIndexByTwitterId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemIDIndexByWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfMeemIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTwitterIdByTwitterId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTwitterIdByWalletAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWalletAddressByTwitterId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWalletAddressByWalletAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      { target: string; action: BigNumberish; selectors: BytesLike[] }[],
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFallbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFallbackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ID_VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrAddMeemID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemIDByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemIDByTwitterId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemIDByWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemIDIndexByTwitterId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemIDIndexByWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfMeemIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTwitterIdByTwitterId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTwitterIdByWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletAddressByTwitterId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletAddressByWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MeemId extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MeemIdInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ID_VERIFIER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ID_VERIFIER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrAddMeemID(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createOrAddMeemID(address,string)"(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMeemIDByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    "getMeemIDByIndex(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    getMeemIDByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    "getMeemIDByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    getMeemIDByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    "getMeemIDByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], string[], string, string] & {
          wallets: string[];
          twitters: string[];
          defaultWallet: string;
          defaultTwitter: string;
        }
      ]
    >;

    getMeemIDIndexByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMeemIDIndexByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMeemIDIndexByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMeemIDIndexByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfMeemIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumberOfMeemIds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeTwitterIdByTwitterId(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTwitterIdByTwitterId(string,string)"(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTwitterIdByWalletAddress(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeTwitterIdByWalletAddress(address,string)"(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWalletAddressByTwitterId(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeWalletAddressByTwitterId(string,address)"(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWalletAddressByWalletAddress(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeWalletAddressByWalletAddress(address,address)"(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [([string, string[]] & { target: string; selectors: string[] })[]] & {
        diamondFacets: ([string, string[]] & {
          target: string;
          selectors: string[];
        })[];
      }
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      [([string, string[]] & { target: string; selectors: string[] })[]] & {
        diamondFacets: ([string, string[]] & {
          target: string;
          selectors: string[];
        })[];
      }
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<[string]>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<[string]>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ID_VERIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

  "ID_VERIFIER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrAddMeemID(
    addy: string,
    twitterId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createOrAddMeemID(address,string)"(
    addy: string,
    twitterId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMeemIDByIndex(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  "getMeemIDByIndex(uint256)"(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  getMeemIDByTwitterId(
    twitterId: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  "getMeemIDByTwitterId(string)"(
    twitterId: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  getMeemIDByWalletAddress(
    addy: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  "getMeemIDByWalletAddress(address)"(
    addy: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string, string] & {
      wallets: string[];
      twitters: string[];
      defaultWallet: string;
      defaultTwitter: string;
    }
  >;

  getMeemIDIndexByTwitterId(
    twitterId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMeemIDIndexByTwitterId(string)"(
    twitterId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMeemIDIndexByWalletAddress(
    addy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMeemIDIndexByWalletAddress(address)"(
    addy: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfMeemIds(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfMeemIds()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeTwitterIdByTwitterId(
    lookupTwitterId: string,
    twitterIdToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTwitterIdByTwitterId(string,string)"(
    lookupTwitterId: string,
    twitterIdToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTwitterIdByWalletAddress(
    lookupWalletAddress: string,
    twitterIdToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeTwitterIdByWalletAddress(address,string)"(
    lookupWalletAddress: string,
    twitterIdToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWalletAddressByTwitterId(
    lookupTwitterId: string,
    addressToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeWalletAddressByTwitterId(string,address)"(
    lookupTwitterId: string,
    addressToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWalletAddressByWalletAddress(
    lookupWalletAddress: string,
    addressToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeWalletAddressByWalletAddress(address,address)"(
    lookupWalletAddress: string,
    addressToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: {
      target: string;
      action: BigNumberish;
      selectors: BytesLike[];
    }[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "diamondCut(tuple[],address,bytes)"(
    facetCuts: {
      target: string;
      action: BigNumberish;
      selectors: BytesLike[];
    }[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  "facetAddress(bytes4)"(
    selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<([string, string[]] & { target: string; selectors: string[] })[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<([string, string[]] & { target: string; selectors: string[] })[]>;

  getFallbackAddress(overrides?: CallOverrides): Promise<string>;

  "getFallbackAddress()"(overrides?: CallOverrides): Promise<string>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  "nomineeOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setFallbackAddress(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFallbackAddress(address)"(
    fallbackAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ID_VERIFIER_ROLE(overrides?: CallOverrides): Promise<string>;

    "ID_VERIFIER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrAddMeemID(
      addy: string,
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOrAddMeemID(address,string)"(
      addy: string,
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMeemIDByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    "getMeemIDByIndex(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    getMeemIDByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    "getMeemIDByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    getMeemIDByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    "getMeemIDByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string, string] & {
        wallets: string[];
        twitters: string[];
        defaultWallet: string;
        defaultTwitter: string;
      }
    >;

    getMeemIDIndexByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDIndexByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemIDIndexByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDIndexByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMeemIds(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfMeemIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeTwitterIdByTwitterId(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTwitterIdByTwitterId(string,string)"(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTwitterIdByWalletAddress(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTwitterIdByWalletAddress(address,string)"(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWalletAddressByTwitterId(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWalletAddressByTwitterId(string,address)"(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWalletAddressByWalletAddress(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWalletAddressByWalletAddress(address,address)"(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & { target: string; selectors: string[] })[]
    >;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, string[]] & { target: string; selectors: string[] })[]
    >;

    getFallbackAddress(overrides?: CallOverrides): Promise<string>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<string>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DiamondCut(
      facetCuts: null,
      target: null,
      data: null
    ): TypedEventFilter<
      [
        ([string, number, string[]] & {
          target: string;
          action: number;
          selectors: string[];
        })[],
        string,
        string
      ],
      {
        facetCuts: ([string, number, string[]] & {
          target: string;
          action: number;
          selectors: string[];
        })[];
        target: string;
        data: string;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ID_VERIFIER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ID_VERIFIER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrAddMeemID(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createOrAddMeemID(address,string)"(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMeemIDByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDByIndex(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemIDByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemIDByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemIDIndexByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDIndexByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemIDIndexByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMeemIDIndexByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMeemIds(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfMeemIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeTwitterIdByTwitterId(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTwitterIdByTwitterId(string,string)"(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTwitterIdByWalletAddress(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeTwitterIdByWalletAddress(address,string)"(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWalletAddressByTwitterId(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeWalletAddressByTwitterId(string,address)"(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWalletAddressByWalletAddress(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeWalletAddressByWalletAddress(address,address)"(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getFallbackAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ID_VERIFIER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ID_VERIFIER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrAddMeemID(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createOrAddMeemID(address,string)"(
      addy: string,
      twitterId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMeemIDByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemIDByIndex(uint256)"(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemIDByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemIDByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemIDByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemIDByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemIDIndexByTwitterId(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemIDIndexByTwitterId(string)"(
      twitterId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemIDIndexByWalletAddress(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemIDIndexByWalletAddress(address)"(
      addy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfMeemIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfMeemIds()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTwitterIdByTwitterId(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTwitterIdByTwitterId(string,string)"(
      lookupTwitterId: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTwitterIdByWalletAddress(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeTwitterIdByWalletAddress(address,string)"(
      lookupWalletAddress: string,
      twitterIdToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWalletAddressByTwitterId(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeWalletAddressByTwitterId(string,address)"(
      lookupTwitterId: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWalletAddressByWalletAddress(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeWalletAddressByWalletAddress(address,address)"(
      lookupWalletAddress: string,
      addressToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "diamondCut(tuple[],address,bytes)"(
      facetCuts: {
        target: string;
        action: BigNumberish;
        selectors: BytesLike[];
      }[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFallbackAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nomineeOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFallbackAddress(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFallbackAddress(address)"(
      fallbackAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
