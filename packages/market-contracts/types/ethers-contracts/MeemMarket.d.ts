/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MeemMarketInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "cancelAuction(address,uint256)": FunctionFragment;
    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)": FunctionFragment;
    "createBid(address,uint256,uint256)": FunctionFragment;
    "endAuction(address,uint256)": FunctionFragment;
    "getAuction(address,uint256)": FunctionFragment;
    "getAuctionSplits(address,uint256,uint256)": FunctionFragment;
    "getMeemContractAddress()": FunctionFragment;
    "getRoyalties(address,uint256)": FunctionFragment;
    "setAuctionApproval(address,uint256,bool)": FunctionFragment;
    "setAuctionReservePrice(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionSplits",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeemContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionApproval",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionReservePrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeemContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionReservePrice",
    data: BytesLike
  ): Result;

  events: {
    "AuctionApprovalUpdated(address,uint256,bool)": EventFragment;
    "AuctionBid(address,uint256,address,uint256,bool,bool)": EventFragment;
    "AuctionCanceled(address,uint256,address)": EventFragment;
    "AuctionCreated(address,uint256,uint256,uint256,address,address,uint8,address)": EventFragment;
    "AuctionDurationExtended(address,uint256,uint256)": EventFragment;
    "AuctionEnded(address,uint256,address,address,uint256,address)": EventFragment;
    "AuctionReservePriceUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
}

export class MeemMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MeemMarketInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createBid(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "endAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          number
        ] & {
          isActive: boolean;
          tokenId: BigNumber;
          tokenContract: string;
          approved: boolean;
          amount: BigNumber;
          duration: BigNumber;
          firstBidTime: BigNumber;
          reservePrice: BigNumber;
          curatorFeePercentage: number;
          tokenOwner: string;
          bidder: string;
          curator: string;
          auctionCurrency: string;
          timeBuffer: BigNumber;
          minBidIncrementPercentage: number;
        }
      ]
    >;

    "getAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          string,
          string,
          string,
          string,
          BigNumber,
          number
        ] & {
          isActive: boolean;
          tokenId: BigNumber;
          tokenContract: string;
          approved: boolean;
          amount: BigNumber;
          duration: BigNumber;
          firstBidTime: BigNumber;
          reservePrice: BigNumber;
          curatorFeePercentage: number;
          tokenOwner: string;
          bidder: string;
          curator: string;
          auctionCurrency: string;
          timeBuffer: BigNumber;
          minBidIncrementPercentage: number;
        }
      ]
    >;

    getAuctionSplits(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], BigNumber[], BigNumber, BigNumber] & {
          to: string[];
          amounts: BigNumber[];
          totalSplitAmount: BigNumber;
          tokenOwnerProfit: BigNumber;
        }
      ]
    >;

    "getAuctionSplits(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string[], BigNumber[], BigNumber, BigNumber] & {
          to: string[];
          amounts: BigNumber[];
          totalSplitAmount: BigNumber;
          tokenOwnerProfit: BigNumber;
        }
      ]
    >;

    getMeemContractAddress(overrides?: CallOverrides): Promise<[string]>;

    "getMeemContractAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    "getRoyalties(address,uint256)"(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { account: string; value: BigNumber })[]]
    >;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuctionApproval(address,uint256,bool)"(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuctionReservePrice(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  grantRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "grantRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(address,bytes32)"(
    user: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelAuction(address,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentage: BigNumberish,
    auctionCurrency: string,
    timeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentage: BigNumberish,
    auctionCurrency: string,
    timeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBid(
    tokenContract: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createBid(address,uint256,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "endAuction(address,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuction(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string,
      BigNumber,
      number
    ] & {
      isActive: boolean;
      tokenId: BigNumber;
      tokenContract: string;
      approved: boolean;
      amount: BigNumber;
      duration: BigNumber;
      firstBidTime: BigNumber;
      reservePrice: BigNumber;
      curatorFeePercentage: number;
      tokenOwner: string;
      bidder: string;
      curator: string;
      auctionCurrency: string;
      timeBuffer: BigNumber;
      minBidIncrementPercentage: number;
    }
  >;

  "getAuction(address,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string,
      BigNumber,
      number
    ] & {
      isActive: boolean;
      tokenId: BigNumber;
      tokenContract: string;
      approved: boolean;
      amount: BigNumber;
      duration: BigNumber;
      firstBidTime: BigNumber;
      reservePrice: BigNumber;
      curatorFeePercentage: number;
      tokenOwner: string;
      bidder: string;
      curator: string;
      auctionCurrency: string;
      timeBuffer: BigNumber;
      minBidIncrementPercentage: number;
    }
  >;

  getAuctionSplits(
    tokenContract: string,
    tokenId: BigNumberish,
    tokenOwnerProfit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber] & {
      to: string[];
      amounts: BigNumber[];
      totalSplitAmount: BigNumber;
      tokenOwnerProfit: BigNumber;
    }
  >;

  "getAuctionSplits(address,uint256,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    tokenOwnerProfit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber, BigNumber] & {
      to: string[];
      amounts: BigNumber[];
      totalSplitAmount: BigNumber;
      tokenOwnerProfit: BigNumber;
    }
  >;

  getMeemContractAddress(overrides?: CallOverrides): Promise<string>;

  "getMeemContractAddress()"(overrides?: CallOverrides): Promise<string>;

  getRoyalties(
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  "getRoyalties(address,uint256)"(
    token: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  setAuctionApproval(
    tokenContract: string,
    tokenId: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuctionApproval(address,uint256,bool)"(
    tokenContract: string,
    tokenId: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionReservePrice(
    tokenContract: string,
    tokenId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuctionReservePrice(address,uint256,uint256)"(
    tokenContract: string,
    tokenId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createBid(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "endAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        number
      ] & {
        isActive: boolean;
        tokenId: BigNumber;
        tokenContract: string;
        approved: boolean;
        amount: BigNumber;
        duration: BigNumber;
        firstBidTime: BigNumber;
        reservePrice: BigNumber;
        curatorFeePercentage: number;
        tokenOwner: string;
        bidder: string;
        curator: string;
        auctionCurrency: string;
        timeBuffer: BigNumber;
        minBidIncrementPercentage: number;
      }
    >;

    "getAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        number
      ] & {
        isActive: boolean;
        tokenId: BigNumber;
        tokenContract: string;
        approved: boolean;
        amount: BigNumber;
        duration: BigNumber;
        firstBidTime: BigNumber;
        reservePrice: BigNumber;
        curatorFeePercentage: number;
        tokenOwner: string;
        bidder: string;
        curator: string;
        auctionCurrency: string;
        timeBuffer: BigNumber;
        minBidIncrementPercentage: number;
      }
    >;

    getAuctionSplits(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        to: string[];
        amounts: BigNumber[];
        totalSplitAmount: BigNumber;
        tokenOwnerProfit: BigNumber;
      }
    >;

    "getAuctionSplits(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber, BigNumber] & {
        to: string[];
        amounts: BigNumber[];
        totalSplitAmount: BigNumber;
        tokenOwnerProfit: BigNumber;
      }
    >;

    getMeemContractAddress(overrides?: CallOverrides): Promise<string>;

    "getMeemContractAddress()"(overrides?: CallOverrides): Promise<string>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    "getRoyalties(address,uint256)"(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionApproval(address,uint256,bool)"(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionReservePrice(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionApprovalUpdated(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      approved: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { tokenContract: string; tokenId: BigNumber; approved: boolean }
    >;

    AuctionBid(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      sender: null,
      value: null,
      firstBid: null,
      extended: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, boolean, boolean],
      {
        tokenContract: string;
        tokenId: BigNumber;
        sender: string;
        value: BigNumber;
        firstBid: boolean;
        extended: boolean;
      }
    >;

    AuctionCanceled(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      tokenOwner: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { tokenContract: string; tokenId: BigNumber; tokenOwner: string }
    >;

    AuctionCreated(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      duration: null,
      reservePrice: null,
      tokenOwner: null,
      curator: null,
      curatorFeePercentage: null,
      auctionCurrency: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, string, number, string],
      {
        tokenContract: string;
        tokenId: BigNumber;
        duration: BigNumber;
        reservePrice: BigNumber;
        tokenOwner: string;
        curator: string;
        curatorFeePercentage: number;
        auctionCurrency: string;
      }
    >;

    AuctionDurationExtended(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      duration: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenContract: string; tokenId: BigNumber; duration: BigNumber }
    >;

    AuctionEnded(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      tokenOwner: null,
      winner: null,
      amount: null,
      auctionCurrency: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber, string],
      {
        tokenContract: string;
        tokenId: BigNumber;
        tokenOwner: string;
        winner: string;
        amount: BigNumber;
        auctionCurrency: string;
      }
    >;

    AuctionReservePriceUpdated(
      tokenContract: string | null,
      tokenId: BigNumberish | null,
      reservePrice: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { tokenContract: string; tokenId: BigNumber; reservePrice: BigNumber }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createBid(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "endAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionSplits(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionSplits(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMeemContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getMeemContractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoyalties(address,uint256)"(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuctionApproval(address,uint256,bool)"(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuctionReservePrice(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(address,bytes32)"(
      user: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createAuction(address,uint256,uint256,uint256,address,uint8,address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentage: BigNumberish,
      auctionCurrency: string,
      timeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createBid(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "endAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuction(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuction(address,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionSplits(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionSplits(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      tokenOwnerProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMeemContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMeemContractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalties(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoyalties(address,uint256)"(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuctionApproval(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuctionApproval(address,uint256,bool)"(
      tokenContract: string,
      tokenId: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionReservePrice(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuctionReservePrice(address,uint256,uint256)"(
      tokenContract: string,
      tokenId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
